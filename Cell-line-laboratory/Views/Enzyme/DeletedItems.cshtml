@model IPagedList<Cell_line_laboratory.Entities.Enzyme>
@using X.PagedList
@using X.PagedList.Mvc.Core


@{
    ViewData["Title"] = "Enzyme Deleted Items";
}

<header class="page-header">
    <h1 class="page-title">Enzyme Deleted Items</h1>
</header>

<div class="page-content">
    <div class="card mb-3">
        <div class="card-body">
            <div class="mb-3">
                <input id="searchInput" type="text" class="form-control" placeholder="Search enzyme deleted items...">
            </div>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr class="bg-primary text-white">
                            <th scope="col">#</th>
                            <th scope="col">Enzyme Code</th>
                            <th scope="col">Enzyme Name</th>
                            <th scope="col">CatalogueNo</th>
                            <th scope="col">Maker</th>
                            <th scope="col">Location</th>
                          
                            <th scope="col">Date</th>
                            <th scope="col">Note</th>
                            <th scope="col">User</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.Count; i++)
                        {
                            var enzyme = Model[i];
                            if (enzyme.IsMarkedForDeletion && enzyme.DeletionTimestamp > DateTime.UtcNow)
                            {
                                <tr>
                                    <td>@(i + 1)</td>
                                    <td>@enzyme.PlasmidCode</td>
                                    <td>@enzyme.AntibodyName</td>
                                    <td>@enzyme.CatalogueNo</td>
                                    <td>@enzyme.Maker</td>
                                    <td>@enzyme.Location</td>
                                    <td>@enzyme.Date</td>

                                    <td>@enzyme.Note</td>
                                    <td>@enzyme.User.Name</td>
                                    <td>
                                        <form asp-controller="Plasmid" asp-action="Restore" method="post" class="action-form">
                                            <input type="hidden" name="id" value="@enzyme.Id" />
                                            <button type="button" class="btn btn-success btn-sm confirm-button" data-bs-toggle="modal" data-bs-target="#confirmationModal" data-action="restore">Restore</button>
                                        </form>
                                        <form asp-controller="Plasmid" asp-action="PermanentlyDelete" method="post" class="action-form">
                                            <input type="hidden" name="id" value="@enzyme.Id" />
                                            <button type="button" class="btn btn-danger btn-sm confirm-button" data-bs-toggle="modal" data-bs-target="#confirmationModal" data-action="delete">Permanently Delete</button>
                                        </form>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>


                </table>
            </div>
            <br />
            <div class="pager">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                            <a class="page-link" href="@Url.Action("DeletedItems", new { page = Model.PageNumber - 1 })">Previous</a>
                        </li>
                        @for (int i = 1; i <= Model.PageCount; i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" href="@Url.Action("DeletedItems", new { page = i })">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                            <a class="page-link" href="@Url.Action("DeletedItems", new { page = Model.PageNumber + 1 })">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>

        </div>
    </div>
</div>

<!-- Confirmation Modal for Restore and Permanently Delete -->
<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="confirmationMessage">Are you sure you want to perform this action?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmAction">Confirm</button>
            </div>
        </div>
    </div>
</div>

<script>
    const searchInput = document.getElementById("searchInput");
    const confirmationModal = document.getElementById("confirmationModal");
    const confirmAction = document.getElementById("confirmAction");
    const confirmationMessage = document.getElementById("confirmationMessage");
    let currentForm = null;

    searchInput.addEventListener("input", function () {
        const searchValue = this.value.toLowerCase();
        const rows = document.querySelectorAll("tbody tr");

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const cells = row.cells;
            let rowMatches = false;

            for (let j = 1; j < cells.length - 1; j++) { // Exclude the first and last columns
                const cellContent = cells[j].textContent.toLowerCase();

                if (cellContent.includes(searchValue)) {
                    rowMatches = true;
                    break;
                }
            }

            if (rowMatches) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        }
    });

    confirmAction.addEventListener("click", function () {
        if (currentForm) {
            currentForm.removeEventListener("submit", submitForm);
            currentForm.submit();
        }
    });

    function submitForm(event) {
        event.preventDefault();
        currentForm = null;
        confirmationModal.removeEventListener("show.bs.modal", showModal);
        confirmationModal.hide();
        confirmAction.blur();
    }

    function showModal(event) {
        currentForm = event.relatedTarget.closest(".action-form");
        const action = currentForm.querySelector(".confirm-button").getAttribute("data-action");
         if (action === "restore") {
                confirmationMessage.textContent = "Are you sure you want to restore this item?";
            } else if (action === "delete") {
                confirmationMessage.textContent = "Are you sure you want to permanently delete this item?";
            }
    }

    confirmationModal.addEventListener("show.bs.modal", showModal);
    confirmationModal.addEventListener("hide.bs.modal", function () {
        if (currentForm) {
            currentForm.removeEventListener("submit", submitForm);
            currentForm = null;
        }
    });
</script>
